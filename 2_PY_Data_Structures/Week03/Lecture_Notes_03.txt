# Week 3
# Lecture 1

# 7.1 - Files

################################################################################


Opening a File

    Before we can read the contents of a file, we must first open it.
    Opening is not the same as reading.  That is a separate step.


Using open()

    handle = open(filename,mode)
    It returns a handle to use to manipulate the file.
    The handle is not the data, but just a way to access and manipulate.
    Filename is a string.
    Mode is optional and should be 'r' is we are planning to read the file and 'w' if we are planning to write to the file.  Defaults to 'r'.


What is a Handle?

    >>> fhand = open('mbox.txt')
    >>> print(fhand)
    <_io.TextIOWrapper name='mbox.txt' mode='r' encoding='UTF-8'>

    It is a connection to the file, but it is not the file.


The newline Character

    We use a special character called the "newline" to indicate when a line ends.
    We represent it as \n in strings.
    Even though it looks like two characters, it is only one.

        Example:
            >>> stuff = 'Hello\nWorld!'
            >>> stuff
            'Hello\nWorld!'
            >>> print(stuff)
            Hello
            World!
            >>> stuff = 'X\nY'
            >>> print(stuff)
            X
            Y
            >>> len(stuff)
            3

    A text file has "newlines" at the end of each line.
    A blank line is simply just a "newline" immediately after the preceding "newline" that ended the line before it.
    When you use the print() function, it automatically adds a "newline" to the end of your text, but there is a way to suppress that behavior.


################################################################################

# Lecture 2

# 7.2 - Processing Files

################################################################################


File Handle as a Sequence

    A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence.
    We can use the for statement to iterate through a sequence.
    Remember - a sequence is an ordered set.

        Example:
        Code:
            xfile = open('mbox.txt')
            for cheese in xfile :
                print(cheese)

        Output:
            Blah blah blah 1
            blah blah blah 2
            ...
            blah blha blah n

    In the above example, the for loop will iterate through each line of text in the file that "xfile" references, assign that line to the counter variable "cheese" and then print "cheese", effectively printing each line of the file.


Counting Lines in a File

    fhand = open('mbox-short.txt')
    count = 0
    for line in fhand:
    count = count + 1
    print('Line Count:', count)


Reading the *Whole* File

    We can read the whole file (newlines and all) into a single string.

        Example:

        >>> fhand = open('mbox-short.txt')
        >>> inp = fhand.read()
        >>> print(len(inp))
        94626
        >>> print(inp[:20])
        From stephen.marquar


Searching Through a File

    Use an if statement within the for loop to filter out substrings that meet some criteria and store, count, print, or whatever you want to do with them.

        Example:
        Code:
            fhand = open('mbox-short.txt')
            count = 0
            for line in fhand:
                if line.startswith('From:'):
                    print(line)

        Output:
            From: stephen.marquard@uct.ac.za

            From: louis@media.berkeley.edu

            From: zqian@umich.edu

            From: rjlowe@iupui.edu
            ...

    If you print multiple lines from a file, you may see skipped lines between them.  This is because there is a newline in the string you're reading, and then print() appends a newline.
    To avoid the skipped line, use the rstrip() method to delete the newline from the string prior to or when you pass is to the print() function.

        Example:
        Code:
            fhand = open('mbox-short.txt')
            for line in fhand:
                line = line.rstrip()
                if line.startswith('From:'):
                    print(line)

        Output:
            From: stephen.marquard@uct.ac.za
            From: louis@media.berkeley.edu
            From: zqian@umich.edu
            From: rjlowe@iupui.edu
            From: zqian@umich.edu
            From: rjlowe@iupui.edu
            From: cwen@iupui.edu
            ...


Skipping with Continue

    Rather than using an if statement to find what we are interested in, and the putting all of our processing into that if statement, you can use the if statement to determine if you're not interested in something, skip it with continue and then proceed through the rest of the for loop to process only the interesting lines.
    This is mostly a stylistic point, but it can help compact your code by putting the bulk of it one indent level up than if it were all in an if statement.

        Example:

            fhand = open('mbox-short.txt')
            for line in fhand:
                line = line.rstrip()
                # Skip 'uninteresting lines'
                if not line.startswith('From:'):
                    continue
                # Process our 'interesting' line
                print(line)


User Input File Names

    It's a good practice to put the open() function into a try block in case the user enters a bad file name.
    The except block should include a quit() statement in addition to the error message so that the program doesn't continue down without a valid file handle defined and then traceback.

        Example:

            fname = input('Enter the file name: ')
            try:
                fhand = open(fname)
            except:
                print('File cannot be opened:', fname)
                quit()
            count = 0
            for line in fhand:
                if line.startswith('Subject:'):
                    count = count + 1
            print('There were', count, 'subject lines in', fname)
