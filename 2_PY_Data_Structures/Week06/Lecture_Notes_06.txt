################################################################################

# Python Data Structures
# Week 6
# Lecture 1

# 10 - Tuples

################################################################################


Tuples Are Like Lists

    Tuples are another kind of collection that functions much like a list.
    It has elements that are indexed starting at 0.
    Tuples are immutable.
    This makes them less flexible, but means they are more efficient because they are stored more densely than a list.


Things Not to Do with Tuples

    Cannot sort.
    Cannot append.
    Cannot insert.


Tuples and Assignment

    We can also put a tuple on the LHS of an assignment statement.
    We can even omit the parentheses.

        >>> (x, y) = (4, 'fred')
        >>> print(y)
        fred
        >>> (a, b) = (99, 98)
        >>> print(a)
        99


Tuples and Dictionaries

    The items() method in dictionaries returns a list of (key,value) tuples.


Tuples are Comparable

    The comparison operators work with tuples and other sequences.  If the first item is equal, Python goes to the next element, and so on, until it finds elements that differ.

        >>> (0, 1, 2) < (5, 1, 2)
        True
        >>> (0, 1, 2000000) < (0, 3, 4)
        True
        >>> ('Jones', 'Sally') < ('Jones', 'Sam')
        True
        >>> ('Jones', 'Sally') < ('Adams', 'Sam')
        False

Sorting Lists of tuples

    We can take advantage of the ability to sort a list of tuples to get a sorted version of a dictionary.
    First we sort the dictionary by the key using the items() method and the sorted() function.

        >>> d = {'a':10, 'b':1, 'c':22}
        >>> d.items()
        [('b', 1), ('a', 10), ('c', 22)]
        >>> sorted(d.items())
        [('a', 10), ('b', 1), ('c', 22)]

    We can do this even more directly using the built-in function sorted().

        >>> d = {'a':10, 'b':1, 'c':22}
        >>> t = sorted(d.items())
        >>> t
        [('a', 10), ('b', 1), ('c', 22)]
        >>> for k,v in sorted(d.items()) :
        ...     print(k, v)
        ...
        a 10
        b 1
        c 22


Sort by Values Instead of Key

    If we could construct a list of tuples in the form of of (value, key) instead of the default (key,value), we could sort by value.
    We do this with a for loop that creates a list of tuples.

        >>> c = {'a':10, 'b':1, 'c':22}
        >>> tmp = list()
        >>> for k, v in c.items() :
        ...     tmp.append( (v, k) )
        ...
        >>> print(tmp)
        [(10,'a'), (22.'c'), (1,'b')]
        >>> tmp = sorted(tmp, reverse=True)
        >>> print(tmp)
        [(22,'c'), (10,'a'), (1,'b')]

    Once you make the list of tuples in the preferred (value, key) order, you can use sorted() to sort them and see the largest or smallest value and the associated key.

        Example:

            fhand = open('romeo.txt')
            counts = dict()
            for line in fhand :
                words = line.split()
                for word in words :
                    counts[word] = counts.get(word, 0) + 1

            lst = list()
                for key, val in counts.items() :
                    newtup = (val, key)
                    lst.append(newtup)

            lst = sorted(lst, reverse = True)

            for val, key in lst[:10] :
                print(key, val)

    The above code opens a file, reads it in line-by-line, and gets the frequency of each word and saves it in the dictionary "counts".
    It then builds a list "lst" of the tuples from the dictionary, but it switches the order of the tuples to (value, key) as it does so.
    The list is then sorted in reverse (largest to smallest).
    It then prints the first 10 items in the list in key-value order, effectively giving a list of the 10 most frequent words along with their frequencies.


Using List Comprehension to Shorten Code

    The last 3 blocks of the code in the previous example can be condensed to one line.

        lst = list()
            for key, val in counts.items() :
                newtup = (val, key)
                lst.append(newtup)
        lst = sorted(lst, reverse = True)
        for val, key in lst[:10] :
            print(key, val)

        # Can be written as:

        print( sorted( [ (v,k) for k,v in counts.items() ], reverse=True ) )

    List comprehension creates a dynamic list.  In this case, we make a list of reversed tuples and then sort it.
    See also http://wiki.python.org/moin/HowTo/Sorting
