################################################################################

# Course 3: Using Python to Access Web Data
# Week 6 - JSON and the REST Architecture
# Lecture 1

# 13.5 JavaScript Object Notation (JSON)

################################################################################

JavaScript Object Notation

    Douglas Crockford - "Discoveror" of JSON
    Object literal notation in JavaScript
    http://www.youtube.com/watch?v=kc8BAR7SHJI
        Discovered in 2001.
        It already existed, but he noticed it's potential for use in serializing data.
        Born from JavaScript, but he thought it could be and should be an independent language or specification.
        He found that he would have to convince people that JSON was a standard in order to be able to use it in his work.  So he bought JSON.org, and made a web page declaring JSON was a standard, put some description of what it is, and that worked.
        JSON is static and permanent.  There are no different versions.

JavaScript Object Notation

    JSON represents data as nested "lists" and "dictionaries."

    Example:
        import json

        data = '''
        {
          "name" : "Chuck",
          "phone" : {
            "type" : "intl",
            "number" : "+1 734 303 4456"
           },
           "email" : {
             "hide" : "yes"
           }
        }'''

        info = json.loads(data)
        print('Name:', info["name"])
        print('Hide:', info["email"]["hide"])

    Note the use of the curly braces and key-value pairs.  This is very similar to a Dictionary in Python, but JavaScript calls it an Object.
    Use the json.loads method to take that JSON data and put it into a Python Dictionary that you can work with ("info" in the example above).
    To get something at the top level of the dictionary, it's just dictionary[key].
    To drill down, it's dictionary[key][key]...
                        |______ ______|
                               V
                               This returns a subdictionary.  Then you call the key you want or continue drilling down in this manner as far as necessary.

Next up is the Service Oriented Approach (http://en.wikipedia.com/wiki/Service-oriented_architecture)

################################################################################

# Lecture 2

# Worked Example: JSON (Chapter 13)
# json1.py

################################################################################

First script being discussed (json1.py):

    import json

    data = '''
    {
      "name" : "Chuck",
      "phone" : {
        "type" : "intl",
        "number" : "+1 734 303 4456"
       },
       "email" : {
         "hide" : "yes"
       }
    }'''

    info = json.loads(data)
    print('Name:', info["name"])
    print('Hide:', info["email"]["hide"])

Blah blah blah...pretty much same as the end of the previous lecture

Next script being discussed (json2.py):

    import json

    data = '''
    [
      { "id" : "001",
        "x" : "2",
        "name" : "Chuck"
      } ,
      { "id" : "009",
        "x" : "7",
        "name" : "Chuck"
      }
    ]'''

    info = json.loads(data)
    print('User count:', len(info))

    for item in info:
        print('Name', item['name'])
        print('Id', item['id'])
        print('Attribute', item['x'])

In the above example, the JSON is used to construct a Python List instead of a Python Dictionary as in json1.py.

################################################################################

# Lecture 3

# Douglas Crockford Interview
    # I covered during Lecture 1

################################################################################

See lecture 1

################################################################################

# Lecture 4

# 13.6 Service Oriented Approach

################################################################################

Service Oriented Approach

    Most non-trivial web applications use services
    They use services from other applications.
    For example Airline Reservation system uses:
        Services from credit card and other payment entities
        Services from hotel and car rental services to provide optional add-ons
    Services publish the "rules" applications must follow to make use of the service.
        API: Application Programming Interface

Multiple Systems

    Initially - two systems cooperate and split the problem.
    As the data/service becomes useful - multiple applications want to use the information/application.
    See http://www.youtube.com/watch?v=mj-kCFzF0ME.
        Service layer is a translator that sits between data sources and sinks, and translates data between the formats specific to a particular source/sink to a standard interchange format (e.g. JSON, XML, etc.).

################################################################################

# Lecture 5

# JISC Service Layer Video
    # I covered during Lecture 4

################################################################################

See lecture 4 above.

################################################################################

# Lecture 6

# 13.7 Using Application Programming Interfaces

################################################################################

See http://en.wikipedia.org/wiki/API

Using APIs

    Example code (geojson.py):

    Lots of talking but I can't follow along because of API Key issue.

################################################################################

# Lecture 7

# Worked Example: GeoJSon API

################################################################################

Cannot follow along due to API Key issue

################################################################################

# Lecture 8

# 13.8 Securing API Requests

################################################################################

API Security and Rate Limiting

    The compute resources to run these APIs are not free.
    The data provided by there APIs is usually valuable.
    The data providers might limit the number of requests per day, demand and API "key", or even charge for usage.
    They might change the rules as things progress...

Twitter API

    It's more complicated than Google Geocoding API.
    Twitter requires authentication and authorization, and it rate limits you to a prett low number (around 15 per day versus 2500 for Google).
    If you use Dr. Chuck's twurl.py code that he created, you have to log in and get your own OAuth data, and copy paste it into "def oauth()" inside of hidden.py.

################################################################################

# Lecture 9

# Worked Example: Twitter API (Chapter 13)
# twitter1.py, twitter2.py

################################################################################
