################################################################################

# Course 3: Using Python to Access Web Data
# Week 2
# Lecture 1

# 11.1 - Regular Expressions (regex)

################################################################################


Regular Expressions

    In computing, a regular expression, also referred to as "regex" or "regexp", provides a concise and flexible means for matching strings of text, such as particular characters, words, or patterns of characters.
    A regular expression is written in a formal language that can be interpreted by a regular expression processor.
    See also http://en.wikipedia.org/wiki/Regular_expression.
    See also https://docs.python.org/3/howto/regex.html


Regular Expressions

    Really clever "wild card" expressions for matching and parsing strings.


Understanding Regular Expressions

    Very powerful and quite cryptic.
    Fun once you understand them.
    Regular Expressions are a language unto themselves.
    A language of "marker characters" - programming with characters.
    It is kind of an "old school" language - compact.


Regular Expression Quick Guide

    ^           Matches the beginning of the line.
    $           Matches the end of the line.
    .           Matches any character (a wildcard).
    \s          Matches a whitespace character.
    \S          Matches a non-whitespace character (opposite of \s).
    *           Applies to the immediately preceding character and indicates to match zero or more of the preceding character(s).
    *?          Applies to the immediately preceding character and indicates to match zero or more of the preceding character(s) in "non-greedy mode".
    +           Applies to the immediately preceding character and indicates to match one or more of the preceding character(s).
    +?          Applies to the immediately preceding character and indicates to match one or more of the preceding character(s) in "non-greedy mode".
    [aeiou]     Matches a single character as long as that character is in the specified set. In this example, it would match "a", "e", "i", "o", or "u", but no other characters.
    [a-z0-9]    You can specify ranges of characters using the minus sign. This example is a single character that must be a lowercase letter or a digit.
    [^A-Za-z]   When the first character in the set notation is a caret, it inverts the logic. This example matches a single character that is anything other than an uppercase or lowercase letter.
    ( )         When parentheses are added to a regular expression, they are ignored for the purpose of matching, but allow you to extract a particular subset of the matched string rather than the whole string when using findall().
    \b          Matches the empty string, but only at the start or end of a word.
    \B          Matches the empty string, but not at the start or end of a word.
    \d          Matches any decimal digit; equivalent to the set [0-9].
    \D          Matches any non-digit character; equivalent to the set [^0-9].

    https://www.py4e.com/lectures3/Pythonlearn-11-Regex-Handout.txt


The Regular Expression Module

    Before you can use regular expressions in your program, you must import the library using "import re"
    You can use re.search() to see if a string matches a regular expression, similar to using the find() method for strings.
    You can use re.findall() to extract portions of a string that match your regular expression, similar to a combination of find() and slicing: var[5:10].


Using re.search() Like find()

    Conventional Python with find()

        hand = open('mbox-short.txt')
        for line in hand :
            line = line.rstrip()
            if line.find('From:') >= 0 :
                print(line)

    Now using re.search()

        import re
        hand = open('mbox-short.txt')
        for line in hand :
            line = line.rstrip()
            if re.search('From:', line) :
                print(line)


Using re.search() Like startswith()

    Conventional Python with find()

        hand = open('mbox-short.txt')
        for line in hand :
            line = line.rstrip()
            if line.startswith('From:') :
                print(line)

    Now using re.search()

        import re
        hand = open('mbox-short.txt')
        for line in hand :
            line = line.rstrip()
            if re.search('^From:', line) :
                print(line)

Wild-Card Characters

    The dot '.' character matches any character.
    If you add the asterisk '*' character, the preceding character is searched for any number of times.
    Hence you can search for a string that starts with some character, contains any number of other characters, and then ends with some character.

        Example:

        Using re.search(^X.*:) would find all strings that start with 'X' and end in ':' not matter what is between the 'X' and the ':'.
        If you used this in m-box.txt, you could find results like...

            X-Sieve:
            X-DSPAM-Result:
            X-DSPAM-Confidence:
            X-Content-Type-Message-Body:


Fine-Tuning Your Match

    Depending on how "clean" your data is and the purpose of your application, you may want to narrow your match down a bit.

        re.search(^X.*:)

        X-Sieve: CMU Sieve 2.3
        X-DSPAM-Result: Innocent
        X-Plane is behind schedule: two weeks

    Say we want to make sure that lines that aren't part of the email header like the X-Plane one are filtered out.
    We can fine tune our search
    If we use \S instead of . then we are searching for any non-whitespace character instead of just any character.
    And if we use + instead of * then the "any non-whitespace" character must exist one or more times instead of zero or more times.

        re.search(^X-\S+:)

        X-Sieve: CMU Sieve 2.3
        X-DSPAM-Result: Innocent


################################################################################

# Lecture 2

# 11.2 - Extracting Data

################################################################################


Matching and Extracting Data

    re.search() return a True/False depending on whether the string matches the regular expression.
    If we actually want the matching strings to be extracted, we use re.findall()
    Note that the regex below '[0-9]' means 'numeric digits' and the '+' means one or more of the preceding regex character.
    So altogether it means that it is searching for one or more numeric digits.

        >>> import re
        >>> x = 'My 2 favorite numbers are 19 and 42'
        >>> y = re.findall('[0-9]', x)
        >>> print(y)
        ['2', '19, '42']


Matching and Extracting Data

    When we use re.findall(), it returns a list of zero or more sub-strings that match the regular expression.
    Note that the regex below '[AEIOU]' means upper case vowel.
    So '[AEIOU]+' means one or more upper case vowel.

        >>> import re
        >>> x = 'My 2 favorite numbers are 19 and 42'
        >>> y = re.findall('[0-9]', x)
        >>> print(y)
        ['2', '19, '42']
        >>> y = re.findall('[AEIOU]+', x)
        []

    There are no upper case vowels in the string 'x' so re.findall() returns an empty list.


Warning: Greedy Matching

    The repeat characters ('*' and '+') push outward in both directions (greedy) to match the largest possible string.

        >>> import re
        >>> x = 'From: Using the : character'
        >>> y = re.findall('^F.+:', x)
        >>> print(y)
        ['From: Using the :']

    Since both 'From:' and "From: Using the :" both match the criteria, greedy matching will pick the latter because it is a larger string.


Non-Greedy Matching

    Not all regular expression repeat codes are greedy.
    If you add a '?' to the '*' or '+', it tells them to chill out and not be greedy.
    These non-greedy versions are just the inverse and will return the smallest string that matches the regex.

        >>> import re
        >>> x = 'From: Using the : character'
        >>> y = re.findall('^F.+?:', x)
        >>> print(y)
        ['From:']


Fine-Tuning String Extraction

    You can refine the match for re.findall() and separately determine which portion of the match is to be extracted by using parentheses.

        >>> x = 'From stephen.marquard.uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> y = re.findall('\S+@\S+', x)
        >>> print(y)
        ['stephen.marquard.uct.ac.za']

    The regex '\S+@\S+' looks for one or more non-whitespace characters ('/S'), followed by the @ symbol, followed by one or more non-whitespace character ('\S').
    Comparing this to our previous method using the split() method, this doesn't need to know the format of where the email address falls in each line.
    It just finds all the matching strings, which will (most likely) be email addresses.


Fine-Tuning String Extraction

    Parentheses are not part of the match - but they tell where to start and stop what string to extract.

        >>> x = 'From stephen.marquard.uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> y = re.findall('\S+@\S+', x)
        >>> print(y)
        ['stephen.marquard.uct.ac.za']
        >>> x = 'From stephen.marquard.uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> y = re.findall('^From (\S+@\S+)', x)
        >>> print(y)
        ['stephen.marquard.uct.ac.za']

    So this will match the whole string of 'From ' (with the space) followed by one or more non-whitespace characters followed by @ followed by one or more non-whitespace characters.
    But it only extracts what's in the parentheses.
    So this adds yet another level of fine tuning to make sure you are getting only the senders email addresses.


Fine-Tuning String Extraction

    String find method...kind of long

        >>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
        >>> atpos = data.find('@')
        >>> print (atpos)
        21
        >>> sppos = data.find(' ', atpos)
        >>> print(sppos)
        31
        >>> host = data[atpos+1 : sppos]
        >>> print(host)
        uct.ac.za
        >>>

    The string double split method...a little better.

        >>> line = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
        >>> words = line.split()
        >>> email = words[1]
        >>> email_pieces = email.split('@')
        >>> domain = pieces[1]
        >>> print(domain)

    The Regex version...nice and concise

        >>> import re
        >>> line = 'From stephen.marquard.uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> domain = re.findall('@([^ ]*)', line)
        >>> print(domain)

        Note the Regex above is looking for @ followed by many ('*') non-blank characters ('[^ ]').
        The part with the brackets means the set of characters in the brackets.
        Then the '^ ' means not blank.

    The Even Cooler Regex Version

        >>> import re
        >>> line = 'From stephen.marquard.uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> domain = re.findall('^From .*@([^ ]*)', line)
        >>> print(domain)

        This will only find lines that start with 'From ' followed by some number of characters (i.e. the account), the @ symbol, and then extract the domain.
        This makes sure you're just getting sender addresses contained in the From line.


Escape Character

    If you want a special regular expression character to just behave like a normal character (most of the time) you prefix it with '\'.
    For example, if you want to find dollar signs ('$'), but '$' is used in Regex for matching at the end of a line, then you must use '\$' to say to look for a dollar sign.

        >>> import re
        >>> x = 'We just received $10.00 for cookies'
        >>> y = re.findall('\$[0-9.]+', x)
        >>> print(y)
        ['$10.00']

    So the regex means find a real dollar sign followed by one or more digits or periods.
